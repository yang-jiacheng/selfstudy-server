---
description: "Java 项目编码规范"
globs: *.java
alwaysApply: false
---

# Java代码生成规则 - Cursor IDE

## 重要提示
当生成Java代码时，必须严格遵循以下规范。这些规范基于项目实际代码风格，确保代码一致性和高质量。

## 1. 包命名规范

### 1.1 基本规范
- 使用全小写字母，单词间用点号分隔
- 遵循反向域名命名约定：`com.公司域名.项目名.模块名`
- 包名应该简洁且有意义

### 1.2 包结构规范
```
com.lxy.projectname.module
├── controller/     # 控制层
├── service/        # 服务层
├── service/impl/   # 服务实现层
├── mapper/         # 数据访问层
├── po/             # 持久化对象
├── dto/            # 数据传输对象
├── vo/             # 视图对象
├── config/         # 配置类
├── util/           # 工具类
├── constant/       # 常量类
├── enums/          # 枚举类
├── domain/         # 领域对象
├── exception/      # 异常处理
└── security/       # 安全相关
```

## 2. 类命名规范

### 2.1 基本规范
- 使用 Pascal 命名法（大驼峰）
- 类名应该是名词或名词短语
- 避免使用缩写，除非是广泛认知的缩写

### 2.2 特定类型命名
- **Controller**: `XxxController`
- **Service**: `XxxService`
- **ServiceImpl**: `XxxServiceImpl`
- **PO**: 与数据库表对应的实体类名
- **DTO**: `XxxDTO`
- **VO**: `XxxVO`
- **Config**: `XxxConfig`
- **Util**: `XxxUtil`
- **Constant**: `XxxConstant`
- **Exception**: `XxxException`

### 2.3 示例
```java
// 正确示例
public class AdminManageController { }
public class AuthService { }
public class AdminEditDTO { }
public class LogBusinessType { }
public class CommonConstant { }

// 错误示例
public class adminController { }  // 首字母应大写
public class AuthSvc { }         // 避免缩写
public class ADMIN_DTO { }       // 避免全大写
```

## 3. 方法命名规范

### 3.1 基本规范
- 使用 camelCase 命名法（小驼峰）
- 方法名应该是动词或动词短语
- 应该清晰表达方法的功能

### 3.2 常用方法前缀
- `get`: 获取数据
- `set`: 设置数据
- `is/has`: 判断布尔值
- `add/save`: 添加/保存
- `remove/delete`: 删除
- `update/edit`: 修改
- `list/find`: 查询列表
- `check/validate`: 验证

### 3.3 示例
```java
// 正确示例
public R<Page<AdminInfo>> getAdminInfoList(AdminInfoPageDTO pageDTO) { }
public R<Object> editAdminInfo(AdminEditDTO adminEditDTO) { }
public void disabledAdminInfo(AdminStatusDTO dto) { }
public void removeAdminInfoByIds(List<Integer> userIds) { }

// 错误示例
public R<Page<AdminInfo>> GetAdminInfoList() { }  // 首字母应小写
public R<Object> admin_edit() { }                 // 避免下划线
public void process() { }                         // 不够具体
```

## 4. 变量命名规范

### 4.1 基本规范
- 使用 camelCase 命名法
- 变量名应该有意义，能够表达其作用
- 避免使用单字母变量名（除了循环变量）

### 4.2 变量类型规范
- **常量**: 全大写，单词间用下划线分隔
- **实例变量**: camelCase
- **参数变量**: camelCase
- **局部变量**: camelCase

### 4.3 示例
```java
// 常量
public static final String TOKEN_NAME_ADMIN = "selfStudyAdminToken";
public static final int SUCCESS = 0;
public static final int FAIL = -1;

// 实例变量
private AdminInfoService adminInfoService;
private AuthService authService;

// 参数变量
public R<Object> editAdminInfo(AdminEditDTO adminEditDTO) { }
public void removeAdminInfoByIds(List<Integer> userIds) { }

// 局部变量
AdminInfo adminInfo = adminEditDTO.getAdminInfo();
List<Integer> roleIds = adminEditDTO.getRoleIds();
```

## 5. 注释规范

### 5.1 类注释
```java
/**
 * 类功能描述
 * @author 作者姓名
 * @version 版本号
 * @since 创建日期 yyyy/MM/dd HH:mm
 */
public class ExampleClass {
    // 类内容
}
```

### 5.2 方法注释
```java
/**
 * 方法功能描述
 * @author 作者姓名
 * @since 创建日期 yyyy/MM/dd HH:mm
 * @param paramName 参数描述
 */
public ReturnType methodName(ParamType paramName) {
    // 方法内容
}
```

### 5.3 字段注释
```java
// 简单字段注释
private String username;

/**
 * 复杂字段的详细注释
 */
private ComplexType complexField;
```

### 5.4 注释原则
- 必须添加类注释和公共方法注释
- 注释应该解释"为什么"而不是"怎么做"
- 保持注释与代码同步更新
- 避免无意义的注释

## 6. 代码格式规范

### 6.1 缩进和空格
- 使用 4 个空格进行缩进
- 操作符前后加空格
- 逗号后面加空格
- 方法参数列表的括号内不加空格

### 6.2 大括号规范
- 左大括号不换行
- 右大括号单独成行
- 即使只有一行代码也要使用大括号

```java
// 正确示例
if (condition) {
    doSomething();
}

// 错误示例
if (condition)
{
    doSomething();
}

if (condition) doSomething();  // 缺少大括号
```

### 6.3 行长度
- 每行代码不超过 120 字符
- 长语句应该在适当位置换行

## 7. 注解使用规范

### 7.1 常用注解
- `@RestController`: REST控制器
- `@Service`: 服务层
- `@Resource`: 依赖注入
- `@Transactional`: 事务管理
- `@Valid`: 参数验证

### 7.2 注解位置
- 类注解放在类定义上方
- 方法注解放在方法定义上方
- 字段注解放在字段定义上方

### 7.3 示例
```java
@RestController
@RequestMapping("/adminManage")
public class AdminManageController {

    @Resource
    private AdminInfoService adminInfoService;

    @PostMapping(value = "/getAdminInfoPageList", produces = "application/json")
    public R<Page<AdminInfo>> getAdminInfoList(@RequestBody AdminInfoPageDTO pageDTO) {
        // 方法实现
    }
}
```

## 8. 日志规范

### 8.1 日志级别使用
- `ERROR`: 错误信息，系统异常
- `WARN`: 警告信息，潜在问题
- `INFO`: 一般信息，关键业务流程
- `DEBUG`: 调试信息，开发阶段使用

### 8.2 日志格式
- 使用lombok的`@Slf4j`标注类
```java
@Slf4j

// 使用示例
log.error("错误信息: {}", errorMessage, exception);
log.warn("警告信息: {}", warningMessage);
log.info("业务信息: {}", businessMessage);
log.debug("调试信息: {}", debugMessage);
```

## 9. 数据库相关规范

### 9.1 实体类规范
- 使用lombok的 `@Data` 注解标识类
- 实现 `Serializable` 接口
- 使用 `@TableId` 注解标识主键
- 使用 `@JsonFormat` 格式化日期字段

### 9.2 示例
```java
@Data
public class AdminInfo implements Serializable {

    private static final long serialVersionUID = 1L;

    @TableId(value = "id", type = IdType.AUTO)
    private Integer id;

    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", locale = "zh", timezone = "GMT+8")
    private Date createTime;

}
```

## 10. 依赖注入规范

### 10.1 注入方式
- 优先使用 `@Resource` 注解
- 字段注入放在类的开头
- 按照依赖关系排序

### 10.2 示例
```java
@Service
public class AuthService {

    @Resource
    private RoleService roleService;
    @Resource
    private AdminInfoService adminInfoService;
    @Resource
    private PermissionService permissionService;

    // 业务方法
}
```

## 11. 返回值规范

### 11.1 统一返回格式
- 使用统一的 `R<T>` 返回类型
- 成功时使用 `R.ok()` 或 `R.ok(data)`
- 失败时使用 `R.fail()` 或 `R.fail(message)`

### 11.2 示例
```java
public R<Page<AdminInfo>> getAdminInfoList(AdminInfoPageDTO pageDTO) {
    Page<AdminInfo> pg = adminInfoService.getAdminInfoPageList(pageDTO);
    return R.ok(pg);
}

public R<Object> editAdminInfo(AdminEditDTO adminEditDTO) {
    AdminInfo adminInfo = adminEditDTO.getAdminInfo();
    if (adminInfo == null) {
        return R.fail("参数不能为空");
    }
    // 业务逻辑
    return R.ok();
}
```

## 12. 事务管理规范

### 12.1 事务注解使用
- 在需要事务的方法上添加 `@Transactional`
- 指定回滚异常类型
- 合理设置事务传播行为

### 12.2 示例
```java
@Transactional(rollbackFor = Exception.class)
public void removeAdminInfoByIds(List<Integer> userIds) {
    adminInfoService.removeByIds(userIds);
    adminRoleRelateService.remove(new LambdaQueryWrapper<AdminRoleRelate>()
            .in(AdminRoleRelate::getAdminId, userIds));
}
```

## 13. 工具类规范

### 13.1 工具类设计
- 工具类应该是无状态的
- 方法应该是静态的
- 构造函数应该是私有的
- 类应该是 `final` 的

### 13.2 示例
```java
public final class StringUtils {

    private StringUtils() {
        // 私有构造函数
    }

    public static boolean isEmpty(String str) {
        return str == null || str.trim().length() == 0;
    }

    public static boolean isNotEmpty(String str) {
        return !isEmpty(str);
    }
}
```

## 14. 枚举类规范

### 14.1 枚举定义
- 枚举常量使用全大写
- 提供构造函数和字段
- 提供静态方法进行转换

### 14.2 示例
```java
public enum LogBusinessType {

    OTHER(0, "其他"),
    INSERT(1, "新增"),
    UPDATE(2, "修改"),
    DELETE(3, "删除");

    public final Integer type;
    public final String name;

    LogBusinessType(Integer type, String name) {
        this.type = type;
        this.name = name;
    }

    public static String getName(Integer type) {
        for (LogBusinessType businessType : LogBusinessType.values()) {
            if (businessType.type.equals(type)) {
                return businessType.name;
            }
        }
        return "-";
    }
}
```

## 禁止使用的代码模式
- 禁止使用下划线命名法
- 禁止使用 `@Autowired`，必须使用 `@Resource`
- 禁止使用 `System.out.println`，必须使用 `log`
- 禁止手写 getter/setter，必须使用 `@Data`
- 禁止在事务方法中缺少 `@Transactional(rollbackFor = Exception.class)`
- 禁止使用 `LOG`，必须使用 `log`

## 代码生成检查清单
生成代码时必须确保：
- [ ] 类名使用 Pascal 命名法
- [ ] 方法名使用 camelCase 命名法
- [ ] 实体类使用 @Data 注解
- [ ] 事务方法使用 @Transactional(rollbackFor = Exception.class)
- [ ] 日期字段使用 @JsonFormat 注解
- [ ] 依赖注入使用 @Resource 注解
- [ ] 返回值使用 R<T> 类型
- [ ] 添加必要的方法注释
- [ ] 使用 log 记录日志
- [ ] 禁止在 controller 中 try-catch 异常
- [ ] try-catch 捕获 Exception 类型即可 不到非必要 无需try-catch

**重要：生成的每个Java类都必须符合以上规范，确保代码质量和一致性。**
