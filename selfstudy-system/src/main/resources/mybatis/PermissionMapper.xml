<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lxy.system.mapper.PermissionMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.lxy.system.po.Permission">
        <id column="id" property="id" />
        <result column="parent_id" property="parentId" />
        <result column="level" property="level" />
        <result column="node_path" property="nodePath" typeHandler="com.baomidou.mybatisplus.extension.handlers.JacksonTypeHandler" />
        <result column="name_path" property="namePath" />
        <result column="id_path" property="idPath" />
        <result column="title" property="title" />
        <result column="permission_str" property="permissionStr" />
        <result column="name" property="name" />
        <result column="path" property="path" />
        <result column="component" property="component" />
        <result column="icon" property="icon" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <result column="sort" property="sort" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, parent_id, level, node_path, name_path, id_path, title, permission_str, name, path, component,icon,create_time, update_time, sort
    </sql>

    <select id="getRolePermission" resultMap="BaseResultMap">
        SELECT p.id, parent_id, level, node_path, name_path, id_path, title, permission_str, name, path,component ,icon,create_time, update_time, sort
        from permission p,role_permission_relate rp
        where
            rp.permission_id=p.id and rp.role_id=#{roleId}
    </select>

    <select id="getPermissionTree" resultType="com.lxy.system.vo.PermissionTreeVO">
        SELECT id, parent_id, level,  title, permission_str, name, path,component ,icon,sort,create_time
        from permission
        order by sort,id
    </select>

    <select id="getPermissionListAndChildren" resultMap="BaseResultMap">
        SELECT
        id, parent_id, level, node_path, name_path, id_path, title, permission_str, name, path, component, icon, create_time, update_time, sort
        FROM
        permission
        WHERE
        JSON_OVERLAPS(node_path,
        JSON_ARRAY(
            <foreach collection="ids" item="id" separator=",">
                #{id}
            </foreach>
            )
        )
    </select>

    <select id="getPermissionListAndParent" resultMap="BaseResultMap">
        WITH RECURSIVE ancestors AS (
            -- 初始：从这批 ID 出发
            SELECT id, parent_id, level, node_path, name_path, id_path, title, permission_str, name, path, component, icon, create_time, update_time, sort
            FROM permission
            WHERE id IN
            <foreach collection="ids" item="id" open="("  separator="," close=")">
                #{id}
            </foreach>
            UNION ALL
            -- 递归：往上找 parent
            SELECT m.id, m.parent_id, m.level, m.node_path, m.name_path, m.id_path, m.title, m.permission_str, m.name, m.path, m.component, m.icon, m.create_time, m.update_time, m.sort
            FROM permission m
                     JOIN ancestors a ON m.id = a.parent_id
        )
        SELECT DISTINCT *
        FROM ancestors;
    </select>

    <select id="getMinePermissionTree" resultType="com.lxy.system.vo.PermissionTreeVO">
        SELECT
            permission.id,
            permission.parent_id,
            permission.level,
            permission.node_path,
            permission.name_path,
            permission.id_path,
            permission.title,
            permission.permission_str,
            permission.name,
            permission.path,
            permission.component,
            permission.icon,
            permission.sort,
            permission.update_time,
            permission.create_time

        FROM
            admin_info
                INNER JOIN admin_role_relate ON admin_info.id = admin_role_relate.admin_id
                INNER JOIN role ON admin_role_relate.role_id = role.id
                INNER JOIN role_permission_relate ON role.id = role_permission_relate.role_id
                INNER JOIN permission ON role_permission_relate.permission_id = permission.id
        WHERE
            admin_info.id = #{userId}

        order by permission.sort, permission.id
    </select>

</mapper>
